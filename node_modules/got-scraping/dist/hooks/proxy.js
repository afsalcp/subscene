"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyHook = void 0;
const url_1 = require("url");
const http2_wrapper_1 = require("http2-wrapper");
const h1_proxy_agent_1 = require("../agent/h1-proxy-agent");
const transform_headers_agent_1 = require("../agent/transform-headers-agent");
const { HttpOverHttp2, HttpsOverHttp2, Http2OverHttp2, Http2OverHttps, Http2OverHttp, } = http2_wrapper_1.proxies;
async function proxyHook(options) {
    const { context: { proxyUrl } } = options;
    if (proxyUrl) {
        const parsedProxy = new url_1.URL(proxyUrl);
        validateProxyProtocol(parsedProxy.protocol);
        options.agent = await getAgents(parsedProxy, options.https.rejectUnauthorized);
    }
}
exports.proxyHook = proxyHook;
function validateProxyProtocol(protocol) {
    const isSupported = protocol === 'http:' || protocol === 'https:';
    if (!isSupported) {
        throw new Error(`Proxy URL protocol "${protocol}" is not supported. Please use HTTP or HTTPS.`);
    }
}
async function getAgents(parsedProxyUrl, rejectUnauthorized) {
    // Sockets must not be reused, the proxy server may rotate upstream proxies as well.
    // `http2-wrapper` Agent options
    const wrapperOptions = {
        proxyOptions: {
            url: parsedProxyUrl,
            // Based on the got https.rejectUnauthorized option
            rejectUnauthorized,
        },
        // The sockets won't be reused, no need to keep them
        maxFreeSockets: 0,
        maxEmptySessions: 0,
    };
    // Native `http.Agent` options
    const nativeOptions = {
        proxy: parsedProxyUrl,
        // The sockets won't be reused, no need to keep them
        maxFreeSockets: 0,
    };
    let agent;
    if (parsedProxyUrl.protocol === 'https:') {
        let alpnProtocol = 'http/1.1';
        try {
            const result = await http2_wrapper_1.auto.resolveProtocol({
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                rejectUnauthorized,
                ALPNProtocols: ['h2', 'http/1.1'],
                servername: parsedProxyUrl.hostname,
            });
            alpnProtocol = result.alpnProtocol;
        }
        catch {
            // Some proxies don't support CONNECT protocol, use http/1.1
        }
        const proxyIsHttp2 = alpnProtocol === 'h2';
        if (proxyIsHttp2) {
            agent = {
                http: new transform_headers_agent_1.TransformHeadersAgent(new HttpOverHttp2(wrapperOptions)),
                https: new transform_headers_agent_1.TransformHeadersAgent(new HttpsOverHttp2(wrapperOptions)),
                http2: new Http2OverHttp2(wrapperOptions),
            };
        }
        else {
            // Upstream proxies hang up connections on CONNECT + unsecure HTTP
            agent = {
                http: new transform_headers_agent_1.TransformHeadersAgent(new h1_proxy_agent_1.HttpRegularProxyAgent(nativeOptions)),
                https: new transform_headers_agent_1.TransformHeadersAgent(new h1_proxy_agent_1.HttpsProxyAgent(nativeOptions)),
                http2: new Http2OverHttps(wrapperOptions),
            };
        }
    }
    else {
        // Upstream proxies hang up connections on CONNECT + unsecure HTTP
        agent = {
            http: new transform_headers_agent_1.TransformHeadersAgent(new h1_proxy_agent_1.HttpRegularProxyAgent(nativeOptions)),
            https: new transform_headers_agent_1.TransformHeadersAgent(new h1_proxy_agent_1.HttpsProxyAgent(nativeOptions)),
            http2: new Http2OverHttp(wrapperOptions),
        };
    }
    return agent;
}
//# sourceMappingURL=proxy.js.map