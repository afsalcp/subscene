import { SUPPORTED_BROWSERS, MISSING_VALUE_DATASET_TOKEN, SUPPORTED_OPERATING_SYSTEMS, SUPPORTED_DEVICES, SUPPORTED_HTTP_VERSIONS } from './constants';
export declare const headerGeneratorOptionsShape: {
    browsers: import("ow").ArrayPredicate<string | {
        name: string;
        minVersion: number | undefined;
        maxVersion: number | undefined;
        httpVersion: string | undefined;
    }>;
    operatingSystems: import("ow").ArrayPredicate<string>;
    devices: import("ow").ArrayPredicate<string>;
    locales: import("ow").ArrayPredicate<string>;
    httpVersion: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
    browserListQuery: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
};
/**
 * @typedef BrowserSpecification
 * @param {string} name - One of `chrome`, `edge`, `firefox` and `safari`.
 * @param {number} minVersion - Minimal version of browser used.
 * @param {number} maxVersion - Maximal version of browser used.
 * @param {string} httpVersion - Http version to be used to generate headers (the headers differ depending on the version).
 *  Either 1 or 2. If none specified the httpVersion specified in `HeaderGeneratorOptions` is used.
 */
export declare type HttpVersion = typeof SUPPORTED_HTTP_VERSIONS[number];
export declare type Device = typeof SUPPORTED_DEVICES[number];
export declare type OperatingSystem = typeof SUPPORTED_OPERATING_SYSTEMS[number];
export declare type BrowserName = typeof SUPPORTED_BROWSERS[number];
export interface BrowserSpecification {
    name: BrowserName;
    minVersion?: number;
    maxVersion?: number;
    httpVersion?: HttpVersion;
}
export declare type BrowsersType = BrowserSpecification[] | BrowserName[];
export interface HeaderGeneratorOptions {
    browsers: BrowsersType;
    browserListQuery: string;
    operatingSystems: OperatingSystem[];
    devices: Device[];
    locales: string[];
    httpVersion: HttpVersion;
}
export declare type HttpBrowserObject = {
    name: BrowserName | typeof MISSING_VALUE_DATASET_TOKEN;
    version: any[];
    completeString: string;
    httpVersion: HttpVersion;
};
export declare type Headers = Record<string, string>;
/**
 * @typedef HeaderGeneratorOptions
 * @param {Array<BrowserSpecification|string>} browsers - List of BrowserSpecifications to generate the headers for,
 *  or one of `chrome`, `edge`, `firefox` and `safari`.
 * @param {string} browserListQuery - Browser generation query based on the real world data.
 *  For more info see the [query docs](https://github.com/browserslist/browserslist#full-list).
 *  If `browserListQuery` is passed the `browsers` array is ignored.
 * @param {Array<string>} operatingSystems - List of operating systems to generate the headers for.
 *  The options are `windows`, `macos`, `linux`, `android` and `ios`.
 * @param {Array<string>} devices - List of devices to generate the headers for. Options are `desktop` and `mobile`.
 * @param {Array<string>} locales - List of at most 10 languages to include in the
 *  [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) request header
 *  in the language format accepted by that header, for example `en`, `en-US` or `de`.
 * @param {string} httpVersion - Http version to be used to generate headers (the headers differ depending on the version).
 *  Can be either 1 or 2. Default value is 2.
 */
/**
 * HeaderGenerator randomly generates realistic browser headers based on specified options.
 */
export declare class HeaderGenerator {
    globalOptions: HeaderGeneratorOptions;
    browserListQuery: string | undefined;
    private inputGeneratorNetwork;
    private headerGeneratorNetwork;
    private uniqueBrowsers;
    /**
     * @param {HeaderGeneratorOptions} options - default header generation options used unless overridden
     */
    constructor(options?: Partial<HeaderGeneratorOptions>);
    /**
     * Generates a single set of ordered headers using a combination of the default options specified in the constructor
     * and their possible overrides provided here.
     * @param {HeaderGeneratorOptions} options - specifies options that should be overridden for this one call
     * @param {Object} requestDependentHeaders - specifies known values of headers dependent on the particular request
     */
    getHeaders(options?: Partial<HeaderGeneratorOptions>, requestDependentHeaders?: Headers): Headers;
    /**
     * Returns a new object that contains ordered headers.
     * @param {object} headers - specifies known values of headers dependent on the particular request
     * @param {string[]} order - an array of ordered header names, optional (will be deducted from `user-agent`)
     */
    orderHeaders(headers: Headers, order?: any): Headers;
    private _prepareBrowsersConfig;
    private _getBrowserHttpOptions;
    private _getPossibleAttributeValues;
    private _getAcceptLanguageField;
    /**
    * Extract structured information about a browser and http version in the form of an object from httpBrowserString.
    * @param {string} httpBrowserString - a string containing the browser name, version and http version, such as "chrome/88.0.4324.182|2"
    * @private
    */
    private _prepareHttpBrowserObject;
    /**
    * Extract structured information about a browser in the form of an object from browserString.
    * @param {string} browserString - a string containing the browser name and version, such as "chrome/88.0.4324.182"
    * @private
    */
    private _prepareBrowserObject;
    /**
     * @param {object} headers - non-normalized request headers
     * @returns {string[]} order
     * @private
     */
    private _getOrderFromUserAgent;
    private _browserVersionIsLesserOrEquals;
}
//# sourceMappingURL=header-generator.d.ts.map