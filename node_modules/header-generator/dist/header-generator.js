"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderGenerator = exports.headerGeneratorOptionsShape = void 0;
const tslib_1 = require("tslib");
// @ts-expect-error not a ts library
const generative_bayesian_network_1 = require("generative-bayesian-network");
const ow_1 = tslib_1.__importDefault(require("ow"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const header_network_definition_json_1 = tslib_1.__importDefault(require("./data_files/header-network-definition.json"));
const input_network_definition_json_1 = tslib_1.__importDefault(require("./data_files/input-network-definition.json"));
const headers_order_json_1 = tslib_1.__importDefault(require("./data_files/headers-order.json"));
const browser_helper_file_json_1 = tslib_1.__importDefault(require("./data_files/browser-helper-file.json"));
const browserSpecificationShape = {
    name: ow_1.default.string,
    minVersion: ow_1.default.optional.number,
    maxVersion: ow_1.default.optional.number,
    httpVersion: ow_1.default.optional.string,
};
exports.headerGeneratorOptionsShape = {
    browsers: ow_1.default.optional.array.ofType(ow_1.default.any(ow_1.default.object.exactShape(browserSpecificationShape), ow_1.default.string)),
    operatingSystems: ow_1.default.optional.array.ofType(ow_1.default.string),
    devices: ow_1.default.optional.array.ofType(ow_1.default.string),
    locales: ow_1.default.optional.array.ofType(ow_1.default.string),
    httpVersion: ow_1.default.optional.string,
    browserListQuery: ow_1.default.optional.string,
};
/**
 * @typedef HeaderGeneratorOptions
 * @param {Array<BrowserSpecification|string>} browsers - List of BrowserSpecifications to generate the headers for,
 *  or one of `chrome`, `edge`, `firefox` and `safari`.
 * @param {string} browserListQuery - Browser generation query based on the real world data.
 *  For more info see the [query docs](https://github.com/browserslist/browserslist#full-list).
 *  If `browserListQuery` is passed the `browsers` array is ignored.
 * @param {Array<string>} operatingSystems - List of operating systems to generate the headers for.
 *  The options are `windows`, `macos`, `linux`, `android` and `ios`.
 * @param {Array<string>} devices - List of devices to generate the headers for. Options are `desktop` and `mobile`.
 * @param {Array<string>} locales - List of at most 10 languages to include in the
 *  [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) request header
 *  in the language format accepted by that header, for example `en`, `en-US` or `de`.
 * @param {string} httpVersion - Http version to be used to generate headers (the headers differ depending on the version).
 *  Can be either 1 or 2. Default value is 2.
 */
/**
 * HeaderGenerator randomly generates realistic browser headers based on specified options.
 */
class HeaderGenerator {
    /**
     * @param {HeaderGeneratorOptions} options - default header generation options used unless overridden
     */
    constructor(options = {}) {
        Object.defineProperty(this, "globalOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "browserListQuery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputGeneratorNetwork", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "headerGeneratorNetwork", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "uniqueBrowsers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        (0, ow_1.default)(options, 'HeaderGeneratorOptions', ow_1.default.object.exactShape(exports.headerGeneratorOptionsShape));
        // Use a default setup when the necessary values are not provided
        const { browsers = constants_1.SUPPORTED_BROWSERS, operatingSystems = constants_1.SUPPORTED_OPERATING_SYSTEMS, devices = [constants_1.SUPPORTED_DEVICES[0]], locales = ['en-US'], httpVersion = '2', browserListQuery = '', } = options;
        this.globalOptions = {
            browsers: this._prepareBrowsersConfig(browsers, browserListQuery, httpVersion),
            operatingSystems,
            devices,
            locales,
            httpVersion,
            browserListQuery,
        };
        this.uniqueBrowsers = [];
        for (const browserString of browser_helper_file_json_1.default) {
            // There are headers without user agents in the datasets we used to configure the generator. They should be disregarded.
            if (browserString !== constants_1.MISSING_VALUE_DATASET_TOKEN) {
                this.uniqueBrowsers.push(this._prepareHttpBrowserObject(browserString));
            }
        }
        this.inputGeneratorNetwork = new generative_bayesian_network_1.BayesianNetwork(input_network_definition_json_1.default);
        this.headerGeneratorNetwork = new generative_bayesian_network_1.BayesianNetwork(header_network_definition_json_1.default);
    }
    /**
     * Generates a single set of ordered headers using a combination of the default options specified in the constructor
     * and their possible overrides provided here.
     * @param {HeaderGeneratorOptions} options - specifies options that should be overridden for this one call
     * @param {Object} requestDependentHeaders - specifies known values of headers dependent on the particular request
     */
    getHeaders(options = {}, requestDependentHeaders = {}) {
        (0, ow_1.default)(options, 'HeaderGeneratorOptions', ow_1.default.object.exactShape(exports.headerGeneratorOptionsShape));
        const headerOptions = { ...this.globalOptions, ...options };
        const possibleAttributeValues = this._getPossibleAttributeValues(headerOptions);
        // Generate a sample of input attributes consistent with the data used to create the definition files if possible.
        const inputSample = this.inputGeneratorNetwork.generateConsistentSampleWhenPossible(possibleAttributeValues);
        if (!inputSample) {
            throw new Error('No headers based on this input can be generated. Please relax or change some of the requirements you specified.');
        }
        // Generate the actual headers
        const generatedSample = this.headerGeneratorNetwork.generateSample(inputSample);
        // Manually fill the accept-language header with random ordering of the locales from input
        const generatedHttpAndBrowser = this._prepareHttpBrowserObject(generatedSample[constants_1.BROWSER_HTTP_NODE_NAME]);
        let secFetchAttributeNames = constants_1.HTTP2_SEC_FETCH_ATTRIBUTES;
        let acceptLanguageFieldName = 'accept-language';
        if (generatedHttpAndBrowser.httpVersion !== '2') {
            acceptLanguageFieldName = 'Accept-Language';
            secFetchAttributeNames = constants_1.HTTP1_SEC_FETCH_ATTRIBUTES;
        }
        generatedSample[acceptLanguageFieldName] = this._getAcceptLanguageField(headerOptions.locales);
        const isChrome = generatedHttpAndBrowser.name === 'chrome';
        const isFirefox = generatedHttpAndBrowser.name === 'firefox';
        const isEdge = generatedHttpAndBrowser.name === 'edge';
        const hasSecFetch = (isChrome && generatedHttpAndBrowser.version[0] >= 76)
            || (isFirefox && generatedHttpAndBrowser.version[0] >= 90)
            || (isEdge && generatedHttpAndBrowser.version[0] >= 79);
        // Add fixed headers if needed
        if (hasSecFetch) {
            generatedSample[secFetchAttributeNames.site] = 'same-site';
            generatedSample[secFetchAttributeNames.mode] = 'navigate';
            generatedSample[secFetchAttributeNames.user] = '?1';
            generatedSample[secFetchAttributeNames.dest] = 'document';
        }
        for (const attribute of Object.keys(generatedSample)) {
            if (attribute.startsWith('*') || generatedSample[attribute] === constants_1.MISSING_VALUE_DATASET_TOKEN)
                delete generatedSample[attribute];
        }
        // Order the headers in an order depending on the browser
        return this.orderHeaders({
            ...generatedSample,
            ...requestDependentHeaders,
        }, headers_order_json_1.default[generatedHttpAndBrowser.name]);
    }
    /**
     * Returns a new object that contains ordered headers.
     * @param {object} headers - specifies known values of headers dependent on the particular request
     * @param {string[]} order - an array of ordered header names, optional (will be deducted from `user-agent`)
     */
    orderHeaders(headers, order = this._getOrderFromUserAgent(headers)) {
        const orderedSample = {};
        for (const attribute of order) {
            if (attribute in headers) {
                orderedSample[attribute] = headers[attribute];
            }
        }
        for (const attribute of Object.keys(headers)) {
            if (!order.includes(attribute)) {
                orderedSample[attribute] = headers[attribute];
            }
        }
        return orderedSample;
    }
    _prepareBrowsersConfig(browsers, browserListQuery, httpVersion) {
        let finalBrowsers = browsers;
        if (browserListQuery) {
            finalBrowsers = (0, utils_1.getBrowsersFromQuery)(browserListQuery);
        }
        return finalBrowsers.map((browser) => {
            if (typeof browser === 'string') {
                return { name: browser, httpVersion };
            }
            browser.httpVersion = httpVersion;
            return browser;
        });
    }
    _getBrowserHttpOptions(browsers) {
        const browserHttpOptions = [];
        for (const browser of browsers) {
            for (const browserOption of this.uniqueBrowsers) {
                if (browser.name === browserOption.name) {
                    if ((!browser.minVersion || this._browserVersionIsLesserOrEquals([browser.minVersion], browserOption.version))
                        && (!browser.maxVersion || this._browserVersionIsLesserOrEquals(browserOption.version, [browser.maxVersion]))
                        && browser.httpVersion === browserOption.httpVersion) {
                        browserHttpOptions.push(browserOption.completeString);
                    }
                }
            }
        }
        return browserHttpOptions;
    }
    _getPossibleAttributeValues(headerOptions) {
        const { browsers: optionsBrowser, browserListQuery, httpVersion, operatingSystems } = headerOptions;
        const browsers = this._prepareBrowsersConfig(optionsBrowser, browserListQuery, httpVersion);
        // Find known browsers compatible with the input
        const browserHttpOptions = this._getBrowserHttpOptions(browsers);
        const possibleAttributeValues = {};
        possibleAttributeValues[constants_1.BROWSER_HTTP_NODE_NAME] = browserHttpOptions;
        possibleAttributeValues[constants_1.OPERATING_SYSTEM_NODE_NAME] = operatingSystems;
        if (headerOptions.devices) {
            possibleAttributeValues[constants_1.DEVICE_NODE_NAME] = headerOptions.devices;
        }
        return possibleAttributeValues;
    }
    _getAcceptLanguageField(localesFromOptions) {
        let locales = localesFromOptions;
        let highLevelLocales = [];
        for (const locale of locales) {
            if (!locale.includes('-')) {
                highLevelLocales.push(locale);
            }
        }
        for (const locale of locales) {
            if (!highLevelLocales.includes(locale)) {
                let highLevelEquivalentPresent = false;
                for (const highLevelLocale of highLevelLocales) {
                    if (locale.includes(highLevelLocale)) {
                        highLevelEquivalentPresent = true;
                        break;
                    }
                }
                if (!highLevelEquivalentPresent)
                    highLevelLocales.push(locale);
            }
        }
        highLevelLocales = (0, utils_1.shuffleArray)(highLevelLocales);
        locales = (0, utils_1.shuffleArray)(locales);
        const localesInAddingOrder = [];
        for (const highLevelLocale of highLevelLocales) {
            for (const locale of locales) {
                if (locale.includes(highLevelLocale) && !highLevelLocales.includes(locale)) {
                    localesInAddingOrder.push(locale);
                }
            }
            localesInAddingOrder.push(highLevelLocale);
        }
        let acceptLanguageFieldValue = localesInAddingOrder[0];
        for (let x = 1; x < localesInAddingOrder.length; x++) {
            acceptLanguageFieldValue += `,${localesInAddingOrder[x]};q=${1 - x * 0.1}`;
        }
        return acceptLanguageFieldValue;
    }
    /**
    * Extract structured information about a browser and http version in the form of an object from httpBrowserString.
    * @param {string} httpBrowserString - a string containing the browser name, version and http version, such as "chrome/88.0.4324.182|2"
    * @private
    */
    _prepareHttpBrowserObject(httpBrowserString) {
        const [browserString, httpVersion] = httpBrowserString.split('|');
        let browserObject;
        if (browserString === constants_1.MISSING_VALUE_DATASET_TOKEN) {
            browserObject = { name: constants_1.MISSING_VALUE_DATASET_TOKEN };
        }
        else {
            browserObject = this._prepareBrowserObject(browserString);
        }
        return {
            ...browserObject,
            httpVersion: httpVersion,
            completeString: httpBrowserString,
        };
    }
    /**
    * Extract structured information about a browser in the form of an object from browserString.
    * @param {string} browserString - a string containing the browser name and version, such as "chrome/88.0.4324.182"
    * @private
    */
    _prepareBrowserObject(browserString) {
        const nameVersionSplit = browserString.split('/');
        const versionSplit = nameVersionSplit[1].split('.');
        const preparedVersion = [];
        for (const versionPart of versionSplit) {
            preparedVersion.push(parseInt(versionPart, 10));
        }
        return {
            name: nameVersionSplit[0],
            version: preparedVersion,
            completeString: browserString,
        };
    }
    /**
     * @param {object} headers - non-normalized request headers
     * @returns {string[]} order
     * @private
     */
    _getOrderFromUserAgent(headers) {
        const userAgent = (0, utils_1.getUserAgent)(headers);
        const browser = (0, utils_1.getBrowser)(userAgent);
        if (!browser) {
            return [];
        }
        return headers_order_json_1.default[browser];
    }
    _browserVersionIsLesserOrEquals(browserVersionL, browserVersionR) {
        return browserVersionL[0] <= browserVersionR[0];
    }
}
exports.HeaderGenerator = HeaderGenerator;
//# sourceMappingURL=header-generator.js.map